# This file was generated by CMake because it detected TRY_RUN() commands
# in crosscompiling mode. It will be overwritten by the next CMake run.
# Copy it to a safe location, set the variables to appropriate values
# and use it then to preset the CMake cache (using -C).


# DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The DOUBLE_CORRECT_NEEDED_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/build_mic/Modules/ThirdParty/DoubleConversion/src/double-conversion/CMakeFiles/double-correction-needed.cc
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec1762808444-DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS
# Run arguments : 
#    Called from: [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/DoubleConversion/src/double-conversion/CMakeLists.txt

SET( DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( DOUBLE_CONVERSION_CORRECT_DOUBLE_OPERATIONS__TRYRUN_OUTPUT 
     "89255.0/1e22 = 8.9255e-18"
     CACHE STRING "Output from TRY_RUN" FORCE)


# KWSYS_LFS_WORKS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set KWSYS_LFS_WORKS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# KWSYS_LFS_WORKS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set KWSYS_LFS_WORKS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The KWSYS_LFS_WORKS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/KWSys/src/KWSys/kwsysPlatformTestsCXX.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec59681574-KWSYS_LFS_WORKS
# Run arguments : 
#    Called from: [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/KWSys/src/KWSys/CMakeLists.txt

SET( KWSYS_LFS_WORKS 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( KWSYS_LFS_WORKS__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_HAS_SLICED_DESTRUCTOR_BUG
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_HAS_SLICED_DESTRUCTOR_BUG to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_HAS_SLICED_DESTRUCTOR_BUG__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_HAS_SLICED_DESTRUCTOR_BUG__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_HAS_SLICED_DESTRUCTOR_BUG_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec145115635-VCL_HAS_SLICED_DESTRUCTOR_BUG
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VCL_HAS_SLICED_DESTRUCTOR_BUG 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_HAS_SLICED_DESTRUCTOR_BUG__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_HAS_WORKING_STRINGSTREAM
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_HAS_WORKING_STRINGSTREAM to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_HAS_WORKING_STRINGSTREAM__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_HAS_WORKING_STRINGSTREAM__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_HAS_WORKING_STRINGSTREAM_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec2685018962-VCL_HAS_WORKING_STRINGSTREAM
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VCL_HAS_WORKING_STRINGSTREAM 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_HAS_WORKING_STRINGSTREAM__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_HAS_LFS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_HAS_LFS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_HAS_LFS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_HAS_LFS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_HAS_LFS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec109806572-VCL_HAS_LFS
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VCL_HAS_LFS 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_HAS_LFS__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VXL_HAS_SSE2_HARDWARE_SUPPORT
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VXL_HAS_SSE2_HARDWARE_SUPPORT to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VXL_HAS_SSE2_HARDWARE_SUPPORT__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VXL_HAS_SSE2_HARDWARE_SUPPORT__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VXL_HAS_SSE2_HARDWARE_SUPPORT_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec1013644650-VXL_HAS_SSE2_HARDWARE_SUPPORT
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VXL_HAS_SSE2_HARDWARE_SUPPORT 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VXL_HAS_SSE2_HARDWARE_SUPPORT__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_COMPLEX_POW_WORKS
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_COMPLEX_POW_WORKS to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_COMPLEX_POW_WORKS__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_COMPLEX_POW_WORKS__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_COMPLEX_POW_WORKS_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec2989686053-VCL_COMPLEX_POW_WORKS
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VCL_COMPLEX_POW_WORKS 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_COMPLEX_POW_WORKS__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_CHAR_IS_SIGNED
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_CHAR_IS_SIGNED to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_CHAR_IS_SIGNED__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_CHAR_IS_SIGNED__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_CHAR_IS_SIGNED_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec3342141897-VCL_CHAR_IS_SIGNED
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt

SET( VCL_CHAR_IS_SIGNED 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_CHAR_IS_SIGNED__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# VCL_NUMERIC_LIMITS_HAS_INFINITY
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set VCL_NUMERIC_LIMITS_HAS_INFINITY to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# VCL_NUMERIC_LIMITS_HAS_INFINITY__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set VCL_NUMERIC_LIMITS_HAS_INFINITY__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The VCL_NUMERIC_LIMITS_HAS_INFINITY_COMPILED variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/vxl_platform_tests.cxx
# Executable    : /home/ch185690/XeonPhi/packageGit/build/build_mic/CMakeFiles/cmTryCompileExec889087926-VCL_NUMERIC_LIMITS_HAS_INFINITY
# Run arguments : 
#    Called from: [2]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/config/cmake/config/VXLIntrospectionConfig.cmake
#                 [1]	/home/ch185690/XeonPhi/packageGit/build/itk/Modules/ThirdParty/VNL/src/vxl/CMakeLists.txt
#
# TODO ESO  FIX THIS !!!!! this is not a good fix
#   current icpc -mic  return 0;
#
#SET( VCL_NUMERIC_LIMITS_HAS_INFINITY 
#     "0"
#     CACHE STRING "Result from TRY_RUN" FORCE)
#
SET( VCL_NUMERIC_LIMITS_HAS_INFINITY 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( VCL_NUMERIC_LIMITS_HAS_INFINITY__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# QNANHIBIT_VALUE
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set QNANHIBIT_VALUE to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# QNANHIBIT_VALUE__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set QNANHIBIT_VALUE__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HAVE_QNANHIBIT_VALUE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/XeonPhi/packageBuild/build/itk/Modules/ThirdParty/NrrdIO/src/NrrdIO/CMake/TestQnanhibit.c
# Executable    : /home/ch185690/XeonPhi/packageBuild/build/build_mic/CMakeFiles/cmTryCompileExec1402483437-QNANHIBIT_VALUE
# Run arguments : 
#    Called from: [1]	/home/ch185690/XeonPhi/packageBuild/build/itk/Modules/ThirdParty/NrrdIO/src/NrrdIO/CMakeLists.txt

SET( QNANHIBIT_VALUE 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

SET( QNANHIBIT_VALUE__TRYRUN_OUTPUT 
     "-DTEEM_QNANHIBIT=1"
     CACHE STRING "Output from TRY_RUN" FORCE)


# HDF5_PRINTF_LL_TEST_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set HDF5_PRINTF_LL_TEST_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The HDF5_PRINTF_LL_TEST_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/HDF5Tests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_69fc6-HDF5_PRINTF_LL_TEST_RUN
# Run arguments : 
#    Called from: [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( HDF5_PRINTF_LL_TEST_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( HDF5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT 
     "PRINTF_LL_WIDTH=[l]"
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_INTEGER_WORKS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_INTEGER_WORKS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_INTEGER_WORKS_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_929e2-H5_LDOUBLE_TO_INTEGER_WORKS_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_LDOUBLE_TO_INTEGER_WORKS_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_LDOUBLE_TO_INTEGER_WORKS_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULONG_TO_FLOAT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULONG_TO_FLOAT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULONG_TO_FLOAT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_788ca-H5_ULONG_TO_FLOAT_ACCURATE_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_ULONG_TO_FLOAT_ACCURATE_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_ULONG_TO_FLOAT_ACCURATE_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_19be3-H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_ULONG_TO_FP_BOTTOM_BIT_ACCURATE_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_ULLONG_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_ULLONG_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_ULLONG_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_47f63-H5_FP_TO_ULLONG_ACCURATE_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_FP_TO_ULLONG_ACCURATE_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_FP_TO_ULLONG_ACCURATE_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_ULLONG_RIGHT_MAXIMUM_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_fe0d3-H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN 
     "1"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_FP_TO_ULLONG_RIGHT_MAXIMUM_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_UINT_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_UINT_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_UINT_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_659e0-H5_LDOUBLE_TO_UINT_ACCURATE_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_LDOUBLE_TO_UINT_ACCURATE_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_LDOUBLE_TO_UINT_ACCURATE_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_ULLONG_TO_LDOUBLE_PRECISION_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_ULLONG_TO_LDOUBLE_PRECISION_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_ULLONG_TO_LDOUBLE_PRECISION_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_da31e-H5_ULLONG_TO_LDOUBLE_PRECISION_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_ULLONG_TO_LDOUBLE_PRECISION_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_ULLONG_TO_LDOUBLE_PRECISION_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_FP_TO_INTEGER_OVERFLOW_WORKS_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_ebb49-H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_FP_TO_INTEGER_OVERFLOW_WORKS_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LDOUBLE_TO_LLONG_ACCURATE_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LDOUBLE_TO_LLONG_ACCURATE_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LDOUBLE_TO_LLONG_ACCURATE_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_5478e-H5_LDOUBLE_TO_LLONG_ACCURATE_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_LDOUBLE_TO_LLONG_ACCURATE_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_LLONG_TO_LDOUBLE_CORRECT_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_LLONG_TO_LDOUBLE_CORRECT_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_LLONG_TO_LDOUBLE_CORRECT_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_6206d-H5_LLONG_TO_LDOUBLE_CORRECT_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_LLONG_TO_LDOUBLE_CORRECT_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


# H5_NO_ALIGNMENT_RESTRICTIONS_RUN
#    indicates whether the executable would have been able to run on its
#    target platform. If so, set H5_NO_ALIGNMENT_RESTRICTIONS_RUN to
#    the exit code (in many cases 0 for success), otherwise enter "FAILED_TO_RUN".
# H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT
#    contains the text the executable would have printed on stdout and stderr.
#    If the executable would not have been able to run, set H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT empty.
#    Otherwise check if the output is evaluated by the calling CMake code. If so,
#    check what the source file would have printed when called with the given arguments.
# The H5_NO_ALIGNMENT_RESTRICTIONS_COMPILE variable holds the build result for this TRY_RUN().
# 
# Source file   : /home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConversionTests.c
# Executable    : /home/ch185690/stonge/mic/build/build_full_mic/CMakeFiles/cmTC_0f7f7-H5_NO_ALIGNMENT_RESTRICTIONS_RUN
# Run arguments : 
#    Called from: [3]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [2]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/config/cmake/ConfigureChecks.cmake
#                 [1]	/home/ch185690/stonge/mic/build/itk/Modules/ThirdParty/HDF5/src/itkhdf5/CMakeLists.txt

set( H5_NO_ALIGNMENT_RESTRICTIONS_RUN 
     "0"
     CACHE STRING "Result from TRY_RUN" FORCE)

set( H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT 
     ""
     CACHE STRING "Output from TRY_RUN" FORCE)


